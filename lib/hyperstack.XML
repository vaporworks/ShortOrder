<?xml version="1.0"?>
<doc>
    <assembly>
        <name>hyperstack</name>
    </assembly>
    <members>
        <member name="T:hyperstack.IOwinHost">
            <summary>
            The OWIN application host.
            </summary>
        </member>
        <member name="M:hyperstack.IOwinHost.Start">
            <summary>
            Starts the OWIN host.
            </summary>
        </member>
        <member name="M:hyperstack.IOwinHost.Stop">
            <summary>
            Stops the OWIN host.
            </summary>
        </member>
        <member name="T:hyperstack.IApplication">
            <summary>
            Are you certain you'd like to implement this yourself?
            Application provides a much easier to use base implementation that
            you can extend.
            </summary>
        </member>
        <member name="M:hyperstack.IApplication.Run(System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Func{System.Func{System.ArraySegment{System.Byte},System.Action,System.Boolean},System.Action{System.Exception},System.Action,System.Action}},System.Action{System.Exception})">
            <summary>
            This function gets called once a the request is completed (excluding the request body) in
            order to wire the application up to the rest of the OWIN API
            </summary>
            <param name="request">Processes an incoming request</param>
            <param name="response">A response building helper</param>
            <param name="onException">The callback to invoke in the event of an application exception</param>
        </member>
        <member name="M:hyperstack.HyperStackServer.HyperStack(Symbiote.Core.IAssimilate,System.Action{hyperstack.Config.IConfigureHttp})">
            <summary>
            Provide configuration for the hyperstack server. This will NOT start the server.
            Please take a dependency on IOwinHost and call the Start/Stop methods to
            control the server.
            </summary>
        </member>
        <member name="M:hyperstack.HyperStackServer.Configure(System.Action{hyperstack.Config.IConfigureHttp})">
            <summary>
            Provide configuration for the hyperstack server. This will NOT start the server.
            Please take a dependency on IOwinHost and call the Start/Stop methods to
            control the server.
            </summary>
        </member>
        <member name="M:hyperstack.Config.IConfigureServerSettings.BasePath(System.String)">
            <summary>
            The base path under which all other content will be served (templates, static content, etc.)
            </summary>
            <param name="path">Absolute base path</param>
        </member>
        <member name="M:hyperstack.Config.IConfigureServerSettings.DefaultLayoutTemplate(System.String)">
            <summary>
            When no layout template is specified, this template will be used.
            </summary>
            <param name="layoutName">The name of the layout template without the extension.</param>
        </member>
        <member name="M:hyperstack.Config.IConfigureServerSettings.AddViewSearchFolder(System.String)">
            <summary>
            This folder will be added to the list of locations to search for layout and view templates.
            </summary>
            <param name="path">The search path relative to the base path.</param>
        </member>
        <member name="M:hyperstack.Config.IConfigureHttp.ConfigureHost(System.Action{hyperstack.Config.IConfigureServerSettings})">
            <summary>
            Provide configuration settings for the http host.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:hyperstack.Config.IConfigureHttp.RegisterApplications(System.Action{hyperstack.Owin.IRegisterApplication})">
            <summary>
            Use this to register applications against request predicates (this is sort of like routes only not)
            </summary>
            <param name="register"></param>
        </member>
        <member name="M:hyperstack.Owin.IRegisterApplication.DefineApplication``1(System.Predicate{hyperstack.Owin.IRequest})">
            <summary>
            Associate an IApplication implementation with a request matching the predicate's pattern.
            </summary>
            <typeparam name="TApplication">The application type to respond to requests with</typeparam>
            <param name="route">The predicate used to match requests with this application</param>
        </member>
        <member name="M:hyperstack.Owin.IRegisterApplication.DefineApplication(System.Predicate{hyperstack.Owin.IRequest},System.Type)">
            <summary>
            Associate an IApplication implementation with a request matching the predicate's pattern.
            </summary>
            <param name="route">The predicate used to match requests with this application</param>
            <param name="applicationType">The application type to respond to requests with</param>
            <returns></returns>
        </member>
        <member name="M:hyperstack.Owin.IRegisterApplication.DefineApplication(System.Predicate{hyperstack.Owin.IRequest},System.Action{System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Func{System.Func{System.ArraySegment{System.Byte},System.Action,System.Boolean},System.Action{System.Exception},System.Action,System.Action}},System.Action{System.Exception}})">
            <summary>
            Associate the OWIN delegate with a request predicate.
            </summary>
            <param name="route">The predicate used to match requests with this application</param>
            <param name="application">The application type to respond to requests with</param>
            <returns></returns>
        </member>
    </members>
</doc>
